from typing import List

# 3043. Find the Length of the Longest Common Prefix

# You are given two arrays with positive integers arr1 and arr2.

# A prefix of a positive integer is an integer formed by one or more of its digits, starting from its leftmost digit. For example, 123 is a prefix of the integer 12345, while 234 is not.

# A common prefix of two integers a and b is an integer c, such that c is a prefix of both a and b. For example, 5655359 and 56554 have a common prefix 565 while 1223 and 43456 do not have a common prefix.

# You need to find the length of the longest common prefix between all pairs of integers (x, y) such that x belongs to arr1 and y belongs to arr2.

# Return the length of the longest common prefix among all pairs. If no common prefix exists among them, return 0.

 

# Example 1:

# Input: arr1 = [1,10,100], arr2 = [1000]
# Output: 3
# Explanation: There are 3 pairs (arr1[i], arr2[j]):
# - The longest common prefix of (1, 1000) is 1.
# - The longest common prefix of (10, 1000) is 10.
# - The longest common prefix of (100, 1000) is 100.
# The longest common prefix is 100 with a length of 3.
# Example 2:

# Input: arr1 = [1,2,3], arr2 = [4,4,4]
# Output: 0
# Explanation: There exists no common prefix for any pair (arr1[i], arr2[j]), hence we return 0.
# Note that common prefixes between elements of the same array do not count.
 

# Constraints:

# 1 <= arr1.length, arr2.length <= 5 * 104
# 1 <= arr1[i], arr2[i] <= 108

class Solution:
    def commonPrefix(self, arr1: List[int], arr2: List[int]) -> int:
        # all pairs  loop arr1  arr2
        # helper to fix prefix
        # res >= max len of x or y : break
       
        def helper(int1, int2):
            st1, st2 = str(int1), str(int2)
            ct = 0
            for i in range(min(len(st1), len(st2))):# 0 ~ 2 i = 2
                if st1[i] == st2[i]:
                    ct += 1  # 3
                else:
                    break
            return ct # 3
        #arr1 = [1,10,100], arr2 = [1000]
        arr1.sort()
        arr2.sort()
        l1 = len(arr1) # 3
        l2 = len(arr2) # 1
        res = 0
        for i in range(l1, -1, -1): # 2 ~ 0  i = 0   11
            if res >= len(str(arr1[i])):
                return res
            for j in range(l2, -1, -1): # 0 j = 0     1000
                if res >= len(str(arr2[j])):# 3 >= 1
                    return res
                l_pre = helper(arr1[i], arr2[j]) # 100, 1000  # 3
                res = max(res, l_pre) # 3
        return res # 3
    # time complexity O(nlogn + m * n * k) n is the max(l1, l2) m is another length -> worest case O(m * n)  best case O(nlogn)
    # space complexity O(1)




class Solution:
    def longestCommonPrefix(self, arr1, arr2):
        arr1_prefixes = set()  # Set to store all prefixes from arr1

        # Step 1: Build all possible prefixes from arr1
        for val in arr1:
            while val not in arr1_prefixes and val > 0:
                # Insert current value as a prefix
                arr1_prefixes.add(val)
                # Generate the next shorter prefix by removing the last digit
                val //= 10

        longest_prefix = 0

        # Step 2: Check each number in arr2 for the longest matching prefix
        for val in arr2:
            while val not in arr1_prefixes and val > 0:
                # Reduce val by removing the last digit if not found in the prefix set
                val //= 10
            if val > 0:
                # Length of the matched prefix using log10 to determine the number of digits
                longest_prefix = max(longest_prefix, len(str(val)))

        return longest_prefix

# Let m be the length of arr1, n be the length of arr2, M be the maximum value in arr1, and N be the maximum value in arr2.

# Time Complexity: O(m⋅log10M + n⋅log10N)

# For each number in arr1, we repeatedly divide the number by 10 to generate its prefixes. Since dividing a number by 10 reduces the number of digits logarithmically, this process takes O(log 
# 10
# ​
#  M) for each number in arr1. Hence, for m numbers, the total time complexity is O(m⋅log 
# 10
# ​
#  M).

# Similarly, for each number in arr2, we reduce it by repeatedly dividing it by 10 to check if it matches any prefix in the set. This also takes O(log 
# 10
# ​
#  N) for each number in arr2. Hence, for n numbers, the total time complexity is O(n⋅log 
# 10
# ​
#  N).

# Overall, the total time complexity is O(m⋅log 
# 10
# ​
#  M+n⋅log 
# 10
# ​
#  N).



class TrieNode:
    def __init__(self):
        # Each node has up to 10 possible children (digits 0-9)
        self.children = [None] * 10


class Trie:
    def __init__(self):
        self.root = TrieNode()

    # Insert a number into the Trie by treating it as a string of digits
    def insert(self, num):
        node = self.root
        num_str = str(num)
        for digit in num_str:
            idx = int(digit)
            if not node.children[idx]:
                node.children[idx] = TrieNode()
            node = node.children[idx]

    # Find the longest common prefix for a number in arr2 with the Trie
    def find_longest_prefix(self, num):
        node = self.root
        num_str = str(num)
        len = 0

        for digit in num_str:
            idx = int(digit)
            if node.children[idx]:
                # Increase length if the current digit matches
                len += 1
                node = node.children[idx]
            else:
                # Stop if no match for the current digit
                break
        return len


class Solution:
    def longestCommonPrefix(self, arr1, arr2):
        trie = Trie()

        # Step 1: Insert all numbers from arr1 into the Trie
        for num in arr1:
            trie.insert(num)

        longest_prefix = 0

        # Step 2: Find the longest prefix match for each number in arr2
        for num in arr2:
            len = trie.find_longest_prefix(num)
            longest_prefix = max(longest_prefix, len)

        return longest_prefix